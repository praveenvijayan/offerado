// Define the generator and datasource for MongoDB
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Organization {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String         @unique
  image        String
  ownerId      String
  isActive     Boolean        @default(false)
  users        User[]
  businesses   Business[]
  offers       Offer[]
  products     Product[]
  subscription Subscription[]
  polls        Poll[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  FeedbackForm FeedbackForm[]
  media        Media[]
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId       String             @unique
  role              Role               @default(User)
  email             String             @unique
  isActive          Boolean            @default(true)
  organizationId    String?            @db.ObjectId
  organization      Organization?       @relation(fields: [organizationId], references: [id])
  profileId         String?            @db.ObjectId
  profile           UserProfile?       @relation(fields: [profileId], references: [id])
  notifications     Notification[]
  offersRedeemed    OfferRedeem[]
  pollVotes         PollVote[]
  feedbackResponses FeedbackResponse[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model UserProfile {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  address       String?
  phone         String?
  location      Location?    @relation(fields: [locationId], references: [id])
  preferencesId String?      @db.ObjectId
  preferences   Preferences? @relation(fields: [preferencesId], references: [id])
  User          User[]
  isActive      Boolean      @default(true)
  locationId    String?      @db.ObjectId
}

model Business {
  id             String              @id @default(auto()) @map("_id") @db.ObjectId
  name           String              @unique
  isDefault      Boolean             @default(false)
  description    String?
  logo           String?
  email          String?
  address        String?
  phone          String?
  country        String?
  currency       String?
  location       Location?           @relation(fields: [locationId], references: [id])
  organizationId String              @db.ObjectId
  organization   Organization        @relation(fields: [organizationId], references: [id])
  categories     BusinessCategory[]
  offers         Offer[]
  products       Product[]
  polls          Poll[]
  preferredBy    PreferredBusiness[]
  feedbackForms  FeedbackForm[]
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  isActive       Boolean             @default(true)
  locationId     String?             @db.ObjectId
  media          Media[]
}

model Offer {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  offerType       String
  offerJSON       Json
  templateLiteral Json?
  businessId      String           @db.ObjectId
  business        Business         @relation(fields: [businessId], references: [id])
  startAt         DateTime
  endAt           DateTime
  isActive        Boolean          @default(false)
  qrCode          String?
  organizationId  String           @db.ObjectId // Link to organization
  organization    Organization     @relation(fields: [organizationId], references: [id])
  participants    OfferRedeem[]
  interactiveType InteractiveType?
  templateId      String?          @db.ObjectId
  template        Template?        @relation(fields: [templateId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model Template {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  image     String
  type      String
  component String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Offer     Offer[]
}

model OfferRedeem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  offerId    String   @db.ObjectId
  offer      Offer    @relation(fields: [offerId], references: [id])
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  redeemedAt DateTime @default(now())
}

model Category {
  id          String              @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  businesses  BusinessCategory[] // Many-to-many relation with businesses through join table
  preferredBy PreferredCategory[] // Join table for many-to-many relation with users
  isActive    Boolean             @default(true)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])
}

model Preferences {
  id                  String              @id @default(auto()) @map("_id") @db.ObjectId
  preferredLanguage   String              @default("en")
  preferredBusinesses PreferredBusiness[] // Join table for many-to-many with businesses
  preferredCategories PreferredCategory[] // Join table for many-to-many with categories
  UserProfile         UserProfile[]
}

model BusinessCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  businessId String   @db.ObjectId
  categoryId String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id])
  category   Category @relation(fields: [categoryId], references: [id])
}

model PreferredBusiness {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  preferencesId String      @db.ObjectId
  businessId    String      @db.ObjectId
  preferences   Preferences @relation(fields: [preferencesId], references: [id])
  business      Business    @relation(fields: [businessId], references: [id])
}

model PreferredCategory {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  preferencesId String      @db.ObjectId
  categoryId    String      @db.ObjectId
  preferences   Preferences @relation(fields: [preferencesId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
}

model Subscription {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  tier           SubscriptionTier
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  organizationId String?          @db.ObjectId
  organization   Organization?    @relation(fields: [organizationId], references: [id])
}

model Location {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  latitude    Float
  longitude   Float
  address     String
  UserProfile UserProfile[]
  Business    Business[]
  isActive    Boolean       @default(true)
}

model Product {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  sku            String       @unique
  name           String
  category       String
  mrp            Float
  offerPrice     Float
  quantity       Float
  image          String
  unit           String?
  discountType   DiscountType
  isHidden       Boolean      @default(false)
  businessId     String       @db.ObjectId
  business       Business     @relation(fields: [businessId], references: [id])
  organizationId String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Media {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  url            String
  type           MediaType
  name           String
  organizationId String?       @db.ObjectId
  organization   Organization? @relation(fields: [organizationId], references: [id])
  businessId     String?       @db.ObjectId
  business       Business?     @relation(fields: [businessId], references: [id])
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Poll {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  options        PollOption[]
  votes          PollVote[] // Added this field
  organizationId String       @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id])
  businessId     String       @db.ObjectId
  business       Business     @relation(fields: [businessId], references: [id])
  isActive       Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model PollOption {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  text   String
  pollId String     @db.ObjectId
  poll   Poll       @relation(fields: [pollId], references: [id])
  votes  PollVote[]
  order  Int
}

model PollVote {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  pollId    String     @db.ObjectId
  poll      Poll       @relation(fields: [pollId], references: [id], onDelete: Cascade)
  optionId  String     @db.ObjectId
  option    PollOption @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id])
  createdAt DateTime   @default(now())
}

model FeedbackForm {
  id             String             @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  description    String?
  businessId     String
  business       Business           @relation(fields: [businessId], references: [id])
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id])
  responses      FeedbackResponse[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model FeedbackResponse {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  content        String
  feedbackFormId String
  feedbackForm   FeedbackForm @relation(fields: [feedbackFormId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
}

enum Role {
  User
  Business
  Admin
}

enum DiscountType {
  PERCENTAGE
  BOGO
  SPECIAL
  COMBO
  FLAT
  NONE
}

enum InteractiveType {
  SCRATCH_COUPON
  SPIN_WHEEL
  PLAY_TO_EARN
}

enum SubscriptionTier {
  FREE
  PREMIUM
  ENTERPRISE
}

enum MediaType {
  IMAGE
  VIDEO
  FILE
}